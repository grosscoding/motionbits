---
interface Props {
  id: string;
  height?: string;
}

const { id, height = "400px" } = Astro.props;
---

<div class="example-wrapper" id={id} style={`height: ${height};`}>
  <div class="component-container">
    <slot />
  </div>
  <button class="reload-btn" data-wrapper-id={id}>Replay Animation</button>
</div>

<script>
  // Initialize all reload buttons
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.reload-btn').forEach(button => {
      button.addEventListener('click', (e) => {
        const btn = e.currentTarget as HTMLElement;
        const wrapperId = btn.getAttribute('data-wrapper-id');
        
        if (!wrapperId) return;
        
        const wrapper = document.getElementById(wrapperId);
        if (!wrapper) return;
        
        const container = wrapper.querySelector('.component-container');
        if (!container) return;
        
        // Find the web component (first child that is a custom element)
        const components = Array.from(container.children).filter(
          child => child.tagName.includes('-')
        );
        
        if (components.length === 0) return;
        
        // For each component, clone and replace it
        components.forEach(oldComponent => {
          // Store all attributes
          const props: Record<string, string> = {};
          Array.from(oldComponent.attributes).forEach(attr => {
            props[attr.name] = attr.value;
          });
          
          // Get component name
          const tagName = oldComponent.tagName.toLowerCase();
          
          // Remove old component
          oldComponent.remove();
          
          // Create new component
          setTimeout(() => {
            const newComponent = document.createElement(tagName);
            
            // Set all attributes
            Object.entries(props).forEach(([name, value]) => {
              newComponent.setAttribute(name, value);
            });
            
            // Add to container
            container.appendChild(newComponent);
          }, 10);
        });
      });
    });
  });
</script>

<style>
  .example-wrapper {
    background: #060606;
    border: 1px solid #ffffff1c;
    border-radius: 20px;
    width: 100%;
    margin-top: 1em;
    padding: 1em;
    position: relative;
    height: 500px;
    overflow: hidden;
  }
  
  .component-container {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }
  
  .reload-btn {
    position: absolute;
    bottom: 1rem;
    right: 1rem;
    background: rgba(255, 255, 255, 0.2);
    color: white;
    border: 1px solid rgba(255, 255, 255, 0.3);
    border-radius: 4px;
    padding: 0.5rem 1rem;
    cursor: pointer;
    font-size: 0.875rem;
    transition: all 0.2s ease;
    z-index: 10;
  }
  
  .reload-btn:hover {
    background: rgba(255, 255, 255, 0.3);
  }
</style>
